import numpy as np
from PIL import ImageGrab
import cv2
import time
from numpy import ones,vstack
from numpy.linalg import lstsq
from statistics import mean
import serial

def roi(img, vertices):
    
    #blank mask:
    mask = np.zeros_like(img)   
    
    #filling pixels inside the polygon defined by "vertices" with the fill color    
    cv2.fillPoly(mask, vertices, 255)
    
    #returning the image only where mask pixels are nonzero
    masked = cv2.bitwise_and(img, mask)
    return masked

def draw_lanes(img, lines, color=[0, 255, 255], thickness=3):

    try:
        ys = []  
        for i in lines:
            for ii in i:
                ys += [ii[1],ii[3]]
        min_y = min(ys)
        max_y = 600
        new_lines = []
        line_dict = {}

        for idx,i in enumerate(lines):
            for xyxy in i:
                x_coords = (xyxy[0],xyxy[2])
                y_coords = (xyxy[1],xyxy[3])
                A = vstack([x_coords,ones(len(x_coords))]).T
                m, b = lstsq(A, y_coords)[0]

                # Calculating our new, and improved, xs
                x1 = (min_y-b) / m
                x2 = (max_y-b) / m

                line_dict[idx] = [m,b,[int(x1), min_y, int(x2), max_y]]
                new_lines.append([int(x1), min_y, int(x2), max_y])

        final_lanes = {}

        for idx in line_dict:
            final_lanes_copy = final_lanes.copy()
            m = line_dict[idx][0]
            b = line_dict[idx][1]
            line = line_dict[idx][2]
            
            if len(final_lanes) == 0:
                final_lanes[m] = [ [m,b,line] ]
                
            else:
                found_copy = False

                for other_ms in final_lanes_copy:

                    if not found_copy:
                        if abs(other_ms*1.2) > abs(m) > abs(other_ms*0.8):
                            if abs(final_lanes_copy[other_ms][0][1]*1.2) > abs(b) > abs(final_lanes_copy[other_ms][0][1]*0.8):
                                final_lanes[other_ms].append([m,b,line])
                                found_copy = True
                                break
                        else:
                            final_lanes[m] = [ [m,b,line] ]

        line_counter = {}

        for lanes in final_lanes:
            line_counter[lanes] = len(final_lanes[lanes])

        top_lanes = sorted(line_counter.items(), key=lambda item: item[1])[::-1][:2]

        lane1_id = top_lanes[0][0]
        lane2_id = top_lanes[1][0]

        def average_lane(lane_data):
            x1s = []
            y1s = []
            x2s = []
            y2s = []
            for data in lane_data:
                x1s.append(data[2][0])
                y1s.append(data[2][1])
                x2s.append(data[2][2])
                y2s.append(data[2][3])
            return int(mean(x1s)), int(mean(y1s)), int(mean(x2s)), int(mean(y2s)) 

        l1_x1, l1_y1, l1_x2, l1_y2 = average_lane(final_lanes[lane1_id])
        l2_x1, l2_y1, l2_x2, l2_y2 = average_lane(final_lanes[lane2_id])

        return [l1_x1, l1_y1, l1_x2, l1_y2], [l2_x1, l2_y1, l2_x2, l2_y2], lane1_id, lane2_id
    except Exception as e:
        print(str(e))

def process_img(image):
    original_image = image

    # RGB to GRAY
    processed_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Canny 외곽선 검출
    processed_img =  cv2.Canny(processed_img, threshold1 = 200, threshold2=300)
    
    # 이미지 가우시안 정규화
    processed_img = cv2.GaussianBlur(processed_img,(5,5),0)
    
    # 관심영역만 필터링, 4강 참고
    vertices = np.array([[10,500],[10,300],[300,200],[500,200],[800,300],[800,500],], np.int32)
    processed_img = roi(processed_img, [vertices])

    # Hough 알고리즘, 5강 참고
    lines = cv2.HoughLinesP(processed_img, 1,  np.pi/180, 180,   20,         15)

    m1 = 0 # 차선 1의 기울기
    m2 = 0 # 차선 2의 기울기

    # 차선 그리기
    try:
        l1, l2, m1, m2 = draw_lanes(original_image, lines)
        cv2.line(original_image, (l1[0], l1[1]), (l1[2], l1[3]), [0,255,0], 30)
        cv2.line(original_image, (l2[0], l2[1]), (l2[2], l2[3]), [0,255,0], 30)

    except Exception as e:
        print(str(e))
        pass

    # 외곽선 그리기(For Debug)
    try:
        for coords in lines:
            coords = coords[0]
            try:
                cv2.line(processed_img, (coords[0], coords[1]), (coords[2], coords[3]), [255,0,0], 3)     
                
            except Exception as e:
                print(str(e))
    except Exception as e:
        pass

    return processed_img, original_image, m1, m2

def straight():
    return 0

def left():
    return 1

def right():
    return -1

def slow_ya_roll():
    return 0

def main():
    arduino = serial.Serial('COM5', 9600)
    last_time = time.time()
    cap = cv2.VideoCapture(0) #카메라 이미지 읽은 객체 생성
    while cap.isOpened():
        sucess, frame = cap.read()
        if sucess:
            screen =  frame
            cv2.imshow('Camera Capture', frame)
            print('Frame took {} seconds'.format(time.time()-last_time))
            last_time = time.time()
            new_screen,original_image, m1, m2 = process_img(screen)
            cv2.imshow('window2',cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))

            if m1 < 0 and m2 < 0:     # / /
                num=right()
            elif m1 > 0  and m2 > 0:  # \ \
                num=left()
            else:                     # / \
                num=straight()
        print(num)
        c=str(num)
        c = c.encode('utf-8')
        arduino.write(c)
        key = cv2.waitKey(1)
        if(key == 27):
            break
    cap.release()
    cv2.destroyAllWindows() 

main()




---------------------------------------------------------------
#include<Servo.h> //Servo 라이브러리를 추가
Servo servo;      //Servo 클래스로 servo객체 생성
int value = 0;    // 각도를 조절할 변수 value

void setup() {
  servo.attach(7);     //맴버함수인 attach : 핀 설정
  Serial.begin(9600); //시리얼 모니터 사용 고고
}

void loop() {
  if(Serial.available())      //시리얼 모니터에 데이터가 입력되면
  {
    char in_data;             // 입력된 데이터를 담을 변수 in_data
    in_data = Serial.read(); //시리얼모니터로 입력된 데이터 in_data로 저장
    if(in_data > 0 )        //입력된 데이터가 1이라면
    {
      value += 30;            //각도를 30도 증가시킨다.
    }
    else if (in_data < 0 )  
    {                 //그외의 데이터가 입력되면
      value -= 30;              //각도를 0으로 초기화
    }
    else
      value = 0;
      
    servo.write(value); //value값의 각도로 회전. ex) value가 90이라면 90도 회전
  }
}
